var NotificationState,__webpack_require__={};function createEl(tagName,attrs){if("string"!=typeof tagName)throw new Error("`tagName` must be a `string`.");if(attrs&&"object"!=typeof attrs)throw new Error("`attrs` must be an `object`.");const el=document.createElement(tagName);if(attrs)for(const[prop,rawVal]of Object.entries(attrs)){if("string"!=typeof rawVal&&"number"!=typeof rawVal&&"boolean"!=typeof rawVal||!1===rawVal||null===rawVal)continue;const val=rawVal.toString();if("textContent"===prop){el.textContent=val;continue}const propKebab=prop.replace(/[A-Z]/g,letter=>"-"+letter.toLowerCase());el.setAttribute(propKebab,val)}return el}__webpack_require__.d=function(exports,definition){for(var key in definition)__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)&&Object.defineProperty(exports,key,{enumerable:!0,get:definition[key]})},__webpack_require__.o=function(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop)},function(NotificationState){NotificationState.HIDE_BUSY="HIDE_BUSY",NotificationState.SHOW_BUSY="SHOW_BUSY",NotificationState.SHOWN="SHOWN",NotificationState.WAITING_ON_HIDE="WAITING_ON_HIDE"}(NotificationState||(NotificationState={}));const makeInstanceId=(min,max,excludeIds,tryCount)=>{tryCount=tryCount||1;const id=function(min,max){if("number"!=typeof min||"number"!=typeof max)throw new Error("`min` and `max` must both be `number`s.");if(min<0||max<0||max<min)throw new Error("`min` and `max` must both be 0 or greater and `max` must be greater than `min`.");return min=Math.ceil(min),max=Math.floor(max),Math.floor(Math.random()*(max-min)+min)}(min,max);if(excludeIds.includes(id)){if(tryCount>3)throw new Error("Failed to generate a unique instanceId 3 times!");makeInstanceId(min,max,excludeIds,++tryCount)}return id},DEFAULT_INSTANCE_OPTIONS={parentEl:document.body,position:["top","center"],hideAfterTime:4e3,hideOlder:!1,dismissable:!1,classNames:[]};class SN{hideAfterTime;hideOlder;dismissable;notifierEl;notifications;currentNotificationId;queuedNotifications;instanceId;constructor(options={}){const mergedOptions={...DEFAULT_INSTANCE_OPTIONS,...options};this.hideAfterTime=mergedOptions.hideAfterTime,this.hideOlder=mergedOptions.hideOlder,this.dismissable=mergedOptions.dismissable,this.notifierEl=createEl("div",{class:`simple-notifier simple-notifier--position-x-${mergedOptions.position[1]} simple-notifier--position-y-${mergedOptions.position[0]}`,ariaLive:"assertive"}),this.notifierEl.classList.add(...mergedOptions.classNames),this.notifications=new Map,this.currentNotificationId=0,this.queuedNotifications=[],this.instanceId=makeInstanceId(1e5,1e6,SN.#instanceIds),SN.#instanceIds.push(this.instanceId),mergedOptions.parentEl.insertBefore(this.notifierEl,mergedOptions.parentEl.firstElementChild)}static#instanceIds=[];get notificationIds(){return[...this.notifications.keys()]}#getNotificationOptions(textOrOptions,variant){const notificationOptions="object"!=typeof textOrOptions||Array.isArray(textOrOptions)?void 0:textOrOptions,notificationText=notificationOptions?notificationOptions.text:textOrOptions;return{hideAfterTime:notificationOptions?.hideAfterTime??this.hideAfterTime,hideOlder:notificationOptions?.hideOlder??this.hideOlder,dismissable:notificationOptions?.dismissable??this.dismissable,text:"string"==typeof notificationText&&""!==notificationText?[notificationText]:notificationText||null,title:notificationOptions?.title||null,titleLevel:notificationOptions?.titleLevel??"h6",variant:notificationOptions?.variant??variant??"default"}}#makeNotificationEl(id,notificationWithoutEl){const notificationEl=createEl("div",{class:`simple-notification simple-notification--${notificationWithoutEl.variant} simple-notification--animation-in`,role:"alert",dataNotificationId:id.toString()}),contentEl=createEl("div",{class:"simple-notification__part simple-notification__part--main"});if(notificationWithoutEl.title){const titleEl=createEl(notificationWithoutEl.titleLevel,{class:"simple-notification__title",textContent:notificationWithoutEl.title});contentEl.append(titleEl)}if(notificationWithoutEl.text&&notificationWithoutEl.text.forEach(line=>{const textEl=createEl("p",{class:"simple-notification__text",textContent:line});contentEl.append(textEl)}),notificationEl.append(contentEl),notificationWithoutEl.dismissable){const sideContentEl=createEl("div",{class:"simple-notification__part simple-notification__part--side"}),hideButtonEl=createEl("button",{type:"button",class:"simple-notification__hide-button",ariaLabel:"Dismiss notification"});hideButtonEl.addEventListener("click",()=>this.hide(id),{once:!0,signal:notificationWithoutEl.abortControllers.hideButtonElEvent.signal}),sideContentEl.append(hideButtonEl),notificationEl.append(sideContentEl)}return notificationEl}#processQueuedNotifications(){if(0===this.queuedNotifications.length)return;const queueCopyReversed=[...this.queuedNotifications].reverse();this.queuedNotifications=[];let notificationsToShowReversed=[],count=0;for(const notificationOptions of queueCopyReversed)if(count++,notificationOptions.hideOlder){notificationsToShowReversed=queueCopyReversed.slice(0,count);break}notificationsToShowReversed.reverse().forEach(notificationOptions=>this.show(notificationOptions))}show(textOrOptions,variant){const userOptions="object"==typeof textOrOptions&&!Array.isArray(textOrOptions);if(void 0===textOrOptions||userOptions&&void 0===textOrOptions.text&&void 0===textOrOptions.title)return void console.warn("`text` or `title` must be defined. `text` may be provided as `string` or `string[]` or via an `object` as `text` value.");if(void 0!==variant&&"string"!=typeof variant)return void console.warn("`variant` must be a `string`.");const hideOlder=(userOptions&&textOrOptions.hideOlder)??this.hideOlder;if(hideOlder&&this.notifications.size>0||this.queuedNotifications.length>0){const notificationOptions=userOptions?{...textOrOptions,hideOlder:hideOlder}:{text:textOrOptions,variant:variant,hideOlder:hideOlder};return this.queuedNotifications.push(notificationOptions),this.hideAll(),void this.notifierEl.addEventListener("allhidden",()=>this.#processQueuedNotifications(),{once:!0})}const currentNotificationId=this.currentNotificationId;this.currentNotificationId++;const notificationOptions=this.#getNotificationOptions(textOrOptions,variant),notificationWithoutEl={...notificationOptions,state:NotificationState.SHOW_BUSY,abortControllers:{hideButtonElEvent:new AbortController,waitForHide:new AbortController}},notificationEl=this.#makeNotificationEl(currentNotificationId,notificationWithoutEl),notification={...notificationWithoutEl,el:notificationEl};this.notifications.set(currentNotificationId,notification),this.notifierEl.append(notificationEl),notificationEl.addEventListener("animationend",()=>{notification.state=NotificationState.SHOWN;const notificationShownEvent=new CustomEvent("shown",{detail:{instanceId:this.instanceId,notificationId:currentNotificationId}});this.notifierEl.dispatchEvent(notificationShownEvent),notificationOptions.hideAfterTime>0&&(notification.state=NotificationState.WAITING_ON_HIDE,function(duration,resolveValue,abortSignal){if("number"!=typeof duration)throw new Error("`time` must be a `number`.");return new Promise((resolve,reject)=>{const listener=()=>{clearTimeout(timer),reject(null==abortSignal?void 0:abortSignal.reason)};null==abortSignal||abortSignal.throwIfAborted();const timer=setTimeout(()=>{null==abortSignal||abortSignal.removeEventListener("abort",listener),resolve(true)},duration>=0?duration:0);null==abortSignal||abortSignal.addEventListener("abort",listener)})}(notification.hideAfterTime,0,notification.abortControllers.waitForHide.signal).then(()=>this.hide(currentNotificationId)).catch(abortReason=>{}))},{once:!0,signal:notification.abortControllers.waitForHide.signal})}hide(notificationId){if("number"!=typeof notificationId)return void console.warn("`notificationId` must be a `number`.");const notification=this.notifications.get(notificationId);notification?notification.state!==NotificationState.HIDE_BUSY?(notification.state!==NotificationState.SHOW_BUSY&&notification.state!==NotificationState.WAITING_ON_HIDE||(notification.abortControllers.hideButtonElEvent.abort(`Hide button event of notification ${notificationId} aborted.`),notification.abortControllers.waitForHide.abort(`Scheduled hide or active show action of notification ${notificationId} aborted.`)),notification.state=NotificationState.HIDE_BUSY,notification.el.classList.remove("simple-notification--animation-in"),notification.el.classList.add("simple-notification--animation-out"),notification.el.addEventListener("animationend",()=>{notification.el.innerHTML="",notification.el.remove(),this.notifications.delete(notificationId);const notificationHiddenEvent=new CustomEvent("hidden",{detail:{instanceId:this.instanceId,notificationId:notificationId}});if(this.notifierEl.dispatchEvent(notificationHiddenEvent),0===this.notifications.size){const allNotificationsHiddenEvent=new CustomEvent("allhidden",{detail:{instanceId:this.instanceId}});this.notifierEl.dispatchEvent(allNotificationsHiddenEvent)}},{once:!0})):console.warn(`Already hiding notification ${notificationId}.`):console.warn(`Notification ${notificationId} doesn't exist.`)}hideAll(){const notificationIdsToHide=[];for(const[id,props]of this.notifications.entries())props.state!==NotificationState.HIDE_BUSY&&notificationIdsToHide.push(id);0!==notificationIdsToHide.length&&notificationIdsToHide.forEach(notificationId=>this.hide(notificationId))}}export{SN as default};