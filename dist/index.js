import{createEl,wait}from"@codebundlesbyvik/js-helpers";var NotificationState;!function(NotificationState){NotificationState.HIDE_BUSY="HIDE_BUSY",NotificationState.SHOW_BUSY="SHOW_BUSY",NotificationState.SHOWN="SHOWN",NotificationState.WAITING_ON_HIDE="WAITING_ON_HIDE"}(NotificationState||(NotificationState={}));const DEFAULT_INSTANCE_OPTIONS={parentEl:document.body,position:["start","center"],hideAfterTime:4e3,hideOlder:!1,dismissible:!1,classNames:[]};class SN{hideAfterTime;hideOlder;dismissible;el;notifications;#currentId;queue;hideButtonElAriaLabelText;constructor(options={}){const mergedOptions={...DEFAULT_INSTANCE_OPTIONS,...options};this.hideAfterTime=mergedOptions.hideAfterTime,this.hideOlder=mergedOptions.hideOlder,this.dismissible=mergedOptions.dismissible,this.el=createEl("div",{class:`simple-notifier simple-notifier--position-x-${mergedOptions.position[1]} simple-notifier--position-y-${mergedOptions.position[0]}`,ariaLive:"assertive"}),this.el.classList.add(...mergedOptions.classNames),this.notifications=new Map,this.#currentId=0,this.queue=[],this.hideButtonElAriaLabelText=mergedOptions.hideButtonElAriaLabelText??"Dismiss notification";const notifierElInParentEl=mergedOptions.parentEl.querySelector(".simple-notifier");notifierElInParentEl?notifierElInParentEl.after(this.el):mergedOptions.parentEl.before(this.el)}get currentId(){return this.#currentId}get ids(){return[...this.notifications.keys()]}#getMergedOptions(options){return{hideAfterTime:options?.hideAfterTime??this.hideAfterTime,hideOlder:options?.hideOlder??this.hideOlder,dismissible:options?.dismissible??this.dismissible,text:"string"==typeof options.text?[options.text]:options.text??null,title:"string"==typeof options.title?[options.title,"h6"]:options.title??null,variant:options?.variant??"default"}}#makeDomEl(id,notificationWithoutEl){const notificationEl=createEl("div",{class:`simple-notification simple-notification--${notificationWithoutEl.variant} simple-notification--animation-in`,role:"alert",dataNotificationId:id.toString()}),contentEl=createEl("div",{class:"simple-notification__part simple-notification__part--main"});if(notificationWithoutEl.title){const titleEl=createEl(notificationWithoutEl.title[1],{class:"simple-notification__title"});titleEl.innerHTML=notificationWithoutEl.title[0],contentEl.append(titleEl)}if(notificationWithoutEl.text&&notificationWithoutEl.text.forEach(line=>{const textEl=createEl("p",{class:"simple-notification__text"});textEl.innerHTML=line,contentEl.append(textEl)}),notificationEl.append(contentEl),notificationWithoutEl.dismissible){const sideContentEl=createEl("div",{class:"simple-notification__part simple-notification__part--side"}),hideButtonEl=createEl("button",{type:"button",class:"simple-notification__hide-button",ariaLabel:this.hideButtonElAriaLabelText});hideButtonEl.addEventListener("click",()=>this.hide(id),{once:!0,signal:notificationWithoutEl.abortControllers.hideButtonElEvent.signal}),sideContentEl.append(hideButtonEl),notificationEl.append(sideContentEl)}return notificationEl}#processQueue(){if(0===this.queue.length)return;const queueCopyReversed=[...this.queue].reverse();this.queue.length=0;let notificationsToShowReversed=[],count=0;for(const notificationOptions of queueCopyReversed)if(count++,notificationOptions.hideOlder){notificationsToShowReversed=queueCopyReversed.slice(0,count);break}notificationsToShowReversed.reverse().forEach(options=>this.show(options))}show(textOrOptions,variant){const textOrOptionsAsOptions="string"==typeof textOrOptions||Array.isArray(textOrOptions)?{text:textOrOptions,variant:variant}:{...textOrOptions,variant:variant??textOrOptions?.variant};if(!textOrOptionsAsOptions)return void console.warn("Nothing to show as no parameters were provided.");const options=this.#getMergedOptions(textOrOptionsAsOptions);if(!options.text&&!options.title)return void console.warn("Nothing to show as neither text nor title is provided.");if(options.hideOlder&&this.notifications.size>0||this.queue.length>0)return this.queue.push({...textOrOptionsAsOptions,hideOlder:options.hideOlder}),this.el.addEventListener("allhidden",()=>this.#processQueue(),{once:!0}),void this.hideAll();const currentId=this.#currentId;this.#currentId++;const notificationWithoutEl={...options,state:NotificationState.SHOW_BUSY,abortControllers:{hideButtonElEvent:new AbortController,waitForHide:new AbortController}},notification={...notificationWithoutEl,el:this.#makeDomEl(currentId,notificationWithoutEl)};this.notifications.set(currentId,notification),this.el.append(notification.el),notification.el.addEventListener("animationend",()=>{notification.state=NotificationState.SHOWN;const notificationShownEvent=new CustomEvent("shown",{detail:{id:currentId}});this.el.dispatchEvent(notificationShownEvent),notification.hideAfterTime>0&&(notification.state=NotificationState.WAITING_ON_HIDE,wait(notification.hideAfterTime,!0,notification.abortControllers.waitForHide.signal).then(()=>this.hide(currentId)).catch(abortReason=>{}))},{once:!0,signal:notification.abortControllers.waitForHide.signal})}hide(id){const notification=this.notifications.get(id);notification&&notification.state!==NotificationState.HIDE_BUSY&&(notification.state!==NotificationState.SHOW_BUSY&&notification.state!==NotificationState.WAITING_ON_HIDE||(notification.abortControllers.hideButtonElEvent.abort(`Hide button event of notification ${id} aborted.`),notification.abortControllers.waitForHide.abort(`Scheduled hide or active show action of notification ${id} aborted.`)),notification.state=NotificationState.HIDE_BUSY,notification.el.classList.remove("simple-notification--animation-in"),notification.el.classList.add("simple-notification--animation-out"),notification.el.addEventListener("animationend",()=>{notification.el.innerHTML="",notification.el.remove(),this.notifications.delete(id);const notificationHiddenEvent=new CustomEvent("hidden",{detail:{id:id}});if(this.el.dispatchEvent(notificationHiddenEvent),0===this.notifications.size){const allNotificationsHiddenEvent=new CustomEvent("allhidden");this.el.dispatchEvent(allNotificationsHiddenEvent)}},{once:!0}))}hideAll(){const notificationIdsToHide=[];for(const[id,props]of this.notifications.entries())props.state!==NotificationState.HIDE_BUSY&&notificationIdsToHide.push(id);0!==notificationIdsToHide.length&&notificationIdsToHide.forEach(id=>this.hide(id))}}export{SN as default};