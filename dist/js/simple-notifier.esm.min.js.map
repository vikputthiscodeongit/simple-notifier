{"version":3,"sources":["../../src/js/index.js"],"names":["mergeOptions","require","getPropValue","motionAllowed","timeToMs","createEl","getRandomIntUnder","defaultOptions","autoHide","onlyOneNotification","parentEl","document","body","position","animations","SN","constructor","userOptions","arguments","length","undefined","this","mergedOptions","motionPref","instanceId","nId","nodes","msgData","timeoutIds","events","onlyOne","set","states","nextMsgData","animatedRun","animated","hideCallTimeout","init","Error","concat","wrapper","nodeSkeletons","tagName","attrs","dataset","parentElFChild","firstElementChild","siblingEl","classList","contains","nextElementSibling","insertBefore","screenPosArray","split","add","nodeClasses","allDestroyed","CustomEvent","detail","destroy","runningDestroy","addEventListener","e","remove","hide","show","text","type","inReshow","isVisible","_reshowNotification","_initNotification","_getMsgData","_showNewNotification","role","values","Object","entries","notification","append","notificationId","shown","destroyed","once","defaultMsgData","notext","notype","message","textContent","anim","base","animTimeout","showAnim","setTimeout","dispatchEvent","hideCall","clearTimeout","inHide","nIdsArray","keys","forEach","nTimeoutIds","timeoutId","i","id","_hideNotification","hideAnim","className","replace","typeRegex","_destroyNotification","nodesArrayKeys","nodesArrayValues","Promise","resolve","nodeKey","node","then","catch","error","class"],"mappings":"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","sourcesContent":["const mergeOptions = require(\"merge-options\");\r\nimport { getPropValue, motionAllowed, timeToMs } from \"@codebundlesbyvik/css-operations\";\r\nimport createEl from \"@codebundlesbyvik/element-operations\";\r\nimport getRandomIntUnder from \"@codebundlesbyvik/number-operations\";\r\n\r\nconst defaultOptions = {\r\n    autoHide: true,            // Number / Boolean\r\n    onlyOneNotification: true, // Boolean\r\n    parentEl: document.body,   // Element\r\n    position: \"top center\",    // String\r\n    animations: \"auto\"         // String / Boolean\r\n};\r\n\r\nclass SN {\r\n    constructor(userOptions = {}) {\r\n        this.mergedOptions = mergeOptions(defaultOptions, userOptions);\r\n\r\n        this.autoHide = this.mergedOptions.autoHide;\r\n        this.parentEl = this.mergedOptions.parentEl;\r\n        this.position = this.mergedOptions.position;\r\n        this.motionPref = this.mergedOptions.animations;\r\n\r\n        this.instanceId = null;\r\n\r\n        this.nId = 1;\r\n        this.nodes = {};\r\n        this.msgData = {};\r\n\r\n        this.timeoutIds = {};\r\n        this.events = {};\r\n        this.onlyOne = {\r\n            set: this.mergedOptions.onlyOneNotification,\r\n            states: {},\r\n            nextMsgData: {}\r\n        };\r\n\r\n        this.animatedRun = null;\r\n    }\r\n\r\n    static nodeClasses = {\r\n        wrapper: \"simple-notifier\",\r\n        notification: \"simple-notification\",\r\n        typeRegex: /simple-notification--[A-Za-z]+/g,\r\n        shown: \"is-shown\",\r\n        anim: {\r\n            base: \"animated\",\r\n            show: \"fadeIn\",\r\n            hide: \"fadeOut\"\r\n        }\r\n    }\r\n\r\n    static nodeSkeletons = {\r\n        wrapper: {\r\n            tagName: \"div\",\r\n            attrs: {\r\n                class: SN.nodeClasses.wrapper\r\n            }\r\n        },\r\n        notification: {\r\n            tagName: \"div\",\r\n            attrs: {\r\n                class: SN.nodeClasses.notification,\r\n                role: \"alert\"\r\n            }\r\n        },\r\n        message: {\r\n            tagName: \"p\",\r\n            attrs: {\r\n                class: `${SN.nodeClasses.notification}__message`\r\n            }\r\n        }\r\n    };\r\n\r\n    static defaultMsgData = {\r\n        notext: {\r\n            text: \"This is some dummy text for you, because none was passed in.\",\r\n            type: \"debug\"\r\n        },\r\n        notype: {\r\n            type: \"default\"\r\n        }\r\n    };\r\n\r\n    get animated() {\r\n        switch(this.motionPref) {\r\n            case \"undefined\":\r\n            case \"auto\":\r\n                return motionAllowed();\r\n            default:\r\n                return this.motionPref;\r\n        }\r\n    }\r\n\r\n    get hideCallTimeout() {\r\n        switch(this.autoHide) {\r\n            case true:\r\n                return 3500;\r\n            case false:\r\n                return 0;\r\n            default:\r\n                return this.autoHide;\r\n        }\r\n    }\r\n\r\n    init() {\r\n        console.log(\"SN: Running .init()...\");\r\n\r\n        if (this.instanceId) {\r\n            throw new Error(`SN: .init() has already been called on this instance (${this.instanceId}).`);\r\n        }\r\n\r\n        this.instanceId = getRandomIntUnder(100000);\r\n\r\n        this.nodes.wrapper = createEl(\r\n            SN.nodeSkeletons.wrapper.tagName,\r\n            SN.nodeSkeletons.wrapper.attrs\r\n        );\r\n\r\n        this.nodes.wrapper.dataset.instanceId = this.instanceId;\r\n\r\n        const parentElFChild = this.parentEl.firstElementChild;\r\n\r\n        // Insert the instance in the DOM after any earlier initialized instances sharing the same parentEl.\r\n        const siblingEl = parentElFChild.classList.contains(\"simple-notifier\")\r\n            ? parentElFChild.nextElementSibling\r\n            : parentElFChild;\r\n\r\n        this.parentEl.insertBefore(this.nodes.wrapper, siblingEl);\r\n\r\n        const screenPosArray = this.position.split(\" \");\r\n\r\n        // If only a y-position is set by the user, add an x-position.\r\n        if (screenPosArray.length === 1) {\r\n            screenPosArray[1] = \"center\";\r\n        }\r\n\r\n        this.nodes.wrapper.classList.add(\r\n            `${SN.nodeClasses.wrapper}--pos-y-${screenPosArray[0]}`,\r\n            `${SN.nodeClasses.wrapper}--pos-x-${screenPosArray[1]}`\r\n        );\r\n\r\n        this.events.allDestroyed = new CustomEvent(\"allNotificationsDestroyed\", { detail: {\r\n            instanceId: this.instanceId\r\n        }});\r\n\r\n        console.log(`SN: Instance ${this.instanceId} has been initialized.`);\r\n    }\r\n\r\n    destroy() {\r\n        console.log(\"SN: Running .destroy()...\");\r\n\r\n        if (!this.instanceId) {\r\n            throw new Error(\"SN: Instance isn't initialized!\");\r\n        }\r\n\r\n        if (this.runningDestroy) {\r\n            console.log(\"SN: .destroy was called whilst already running. Returning.\");\r\n\r\n            return;\r\n        }\r\n\r\n        this.runningDestroy = true;\r\n\r\n        this.nodes.wrapper.addEventListener(\"allNotificationsDestroyed\", (e) => {\r\n            console.log(\"SN: All notifications have been destroyed.\");\r\n\r\n            this.nodes.wrapper.remove();\r\n\r\n            if (this.onlyOne) {\r\n                this.onlyOne.states = {};\r\n                this.onlyOne.nextMsgData = {};\r\n            }\r\n\r\n            this.events = {};\r\n\r\n            this.nId = 1;\r\n\r\n            this.instanceId = null;\r\n\r\n            delete this.runningDestroy;\r\n\r\n            console.log(`SN: Instance ${e.detail.instanceId} has been destroyed.`);\r\n        });\r\n\r\n        this.hide();\r\n    }\r\n\r\n    show(text, type) {\r\n        console.log(\"SN: Running .show()...\");\r\n\r\n        if (!this.instanceId) {\r\n            throw new Error(\"SN: Instance isn't initialized!\");\r\n        }\r\n\r\n        if (this.onlyOne.set) {\r\n            if (this.onlyOne.states.inReshow) {\r\n                console.log(\"SN: onlyOneNotification === true and .show() was called during execution ._reshowNotification(). Returning.\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.onlyOne.states.isVisible) {\r\n                console.log(\"SN: onlyOneNotification === true and notification is currently visible. Calling ._reshowNotification()...\");\r\n\r\n                this._reshowNotification(text, type);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        let nId = this.nId;\r\n\r\n        if (!this.onlyOne.set) {\r\n            this.nId++;\r\n        }\r\n\r\n        this._initNotification(nId);\r\n\r\n        this._getMsgData(nId, text, type);\r\n\r\n        this._showNewNotification(nId);\r\n    }\r\n\r\n    _initNotification(nId) {\r\n        console.log(`SN: Running ._initNotification() on nId ${nId}...`);\r\n\r\n        this.nodes[nId] = {};\r\n\r\n        for (const [role, values] of Object.entries(SN.nodeSkeletons)) {\r\n            if (role === \"wrapper\")\r\n                continue;\r\n\r\n            this.nodes[nId][role] = createEl(values.tagName, values.attrs);\r\n\r\n            if (role === \"notification\") {\r\n                this.nodes.wrapper.insertBefore(\r\n                    this.nodes[nId][role],\r\n                    this.nodes.wrapper.firstElementChild\r\n                );\r\n            } else {\r\n                this.nodes[nId].notification.append(this.nodes[nId][role]);\r\n            }\r\n        }\r\n\r\n        this.nodes[nId].notification.dataset.notificationId = nId;\r\n\r\n        this.timeoutIds[nId] = {};\r\n\r\n        this.events[nId] = {};\r\n\r\n        this.events[nId].shown = new CustomEvent(\"notificationShown\", { detail: {\r\n            instanceId: this.instanceId,\r\n            notificationId: nId\r\n        }});\r\n        this.events[nId].destroyed = new CustomEvent(\"notificationDestroyed\", { detail: {\r\n            instanceId: this.instanceId,\r\n            notificationId: nId\r\n        }});\r\n\r\n        this.nodes.wrapper.addEventListener(\r\n            \"notificationShown\",\r\n            this.events[nId].shown,\r\n            { once: true }\r\n        );\r\n        this.nodes.wrapper.addEventListener(\r\n            \"notificationDestroyed\",\r\n            this.events[nId].destroyed,\r\n            { once: true }\r\n        );\r\n    }\r\n\r\n    _getMsgData(nId, text, type) {\r\n        console.log(`SN: Running ._getMsgData on nId ${nId}...`);\r\n\r\n        if (!text) {\r\n            if (this.onlyOne.nextMsgData) {\r\n                text = this.onlyOne.nextMsgData.text;\r\n                type = this.onlyOne.nextMsgData.type;\r\n\r\n                this.onlyOne.nextMsgData = {};\r\n            } else {\r\n                text = SN.defaultMsgData.notext.text;\r\n                type = SN.defaultMsgData.notext.type;\r\n            }\r\n        }\r\n\r\n        if (!type) {\r\n            type = SN.defaultMsgData.notype.type;\r\n        }\r\n\r\n        this.msgData[nId] = {};\r\n\r\n        this.msgData[nId].text = text;\r\n        this.msgData[nId].type = type;\r\n    }\r\n\r\n    _showNewNotification(nId) {\r\n        console.log(`SN: Running ._showNewNotification() on nId ${nId}...`);\r\n\r\n        this.animatedRun = this.animated;\r\n\r\n        this.nodes[nId].message.textContent = this.msgData[nId].text;\r\n\r\n        this.nodes[nId].notification.classList.add(\r\n            `${SN.nodeClasses.notification}--${this.msgData[nId].type}`,\r\n               SN.nodeClasses.shown\r\n        );\r\n\r\n        if (this.animatedRun) {\r\n            this.nodes[nId].notification.classList.add(\r\n                SN.nodeClasses.anim.base,\r\n                SN.nodeClasses.anim.show\r\n            );\r\n\r\n            const animTimeout = timeToMs(getPropValue(\r\n                this.nodes[nId].notification,\r\n                \"animation-duration\"\r\n            ));\r\n\r\n            this.timeoutIds[nId].showAnim = setTimeout(() => {\r\n                this.nodes[nId].notification.classList.remove(SN.nodeClasses.anim.show);\r\n            }, animTimeout);\r\n        }\r\n\r\n        if (this.onlyOne.set) {\r\n            this.onlyOne.states.isVisible = true;\r\n        }\r\n\r\n        this.nodes.wrapper.dispatchEvent(this.events[nId].shown);\r\n\r\n        if (this.hideCallTimeout > 0) {\r\n            this.timeoutIds[nId].hideCall = setTimeout(() => {\r\n                this.hide(nId);\r\n            }, this.hideCallTimeout);\r\n        } else {\r\n            this.animatedRun = null;\r\n        }\r\n    }\r\n\r\n    _reshowNotification(text, type) {\r\n        console.log(\"SN: Running ._reshowNotification()...\");\r\n\r\n        this.onlyOne.states.inReshow = true;\r\n\r\n        this.onlyOne.nextMsgData.text = text;\r\n        this.onlyOne.nextMsgData.type = type;\r\n\r\n        clearTimeout(this.timeoutIds[1].hideCall);\r\n\r\n        this.hide(1);\r\n    }\r\n\r\n    hide(nId) {\r\n        console.log(\"SN: Running .hide()...\");\r\n\r\n        if (!this.instanceId) {\r\n            throw new Error(\"SN: Instance isn't initialized!\");\r\n        }\r\n\r\n        if (this.onlyOne.set) {\r\n            if (this.onlyOne.states.inHide) {\r\n                console.log(\"SN: onlyOneNotification === true and .hide() was called whilst already running. Returning.\");\r\n\r\n                return;\r\n            }\r\n\r\n            this.onlyOne.states.inHide = true;\r\n        }\r\n\r\n        let nIdsArray;\r\n\r\n        if (typeof nId === \"number\") {\r\n            if (this.msgData[nId] === \"undefined\") {\r\n                console.warn(`SN: .hide() was called on a non-existant notification. Returning!`);\r\n\r\n                return;\r\n            }\r\n\r\n            nIdsArray = [nId];\r\n        }\r\n\r\n        if (typeof nId === \"undefined\") {\r\n            nIdsArray = Object.keys(this.msgData);\r\n\r\n            if (nIdsArray.length > 0) {\r\n                console.log(this.timeoutIds);\r\n\r\n                Object.values(this.timeoutIds).forEach((nTimeoutIds) => {\r\n                    Object.values(nTimeoutIds).forEach((timeoutId) => {\r\n                        clearTimeout(timeoutId);\r\n                    });\r\n                });\r\n            } else if (this.runningDestroy) {\r\n                this.nodes.wrapper.dispatchEvent(this.events.allDestroyed);\r\n            } else {\r\n                console.warn(\"SN: .hide() was called, but no notification is currently shown. Returning!\");\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        let i = 1;\r\n\r\n        nIdsArray.forEach((id) => {\r\n            this._hideNotification(id);\r\n\r\n            i++;\r\n\r\n            if (this.onlyOne.set && i > nIdsArray.length) {\r\n                this.onlyOne.states.inHide = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    _hideNotification(nId) {\r\n        console.log(`SN: Running ._hideNotification() on nId ${nId}...`);\r\n\r\n        if (this.animatedRun === null) {\r\n            this.animatedRun = this.animated;\r\n        }\r\n\r\n        let animTimeout = 0;\r\n\r\n        if (this.animatedRun) {\r\n            this.nodes[nId].notification.classList.add(SN.nodeClasses.anim.hide);\r\n\r\n            animTimeout = timeToMs(getPropValue(\r\n                this.nodes[nId].notification,\r\n                \"animation-duration\"\r\n            ));\r\n        }\r\n\r\n        this.timeoutIds[nId].hideAnim = setTimeout(() => {\r\n            this.nodes[nId].notification.classList.remove(SN.nodeClasses.shown);\r\n            this.nodes[nId].notification.className =\r\n                this.nodes[nId].notification.className.replace(SN.nodeClasses.typeRegex, \"\");\r\n\r\n            if (this.animatedRun) {\r\n                this.nodes[nId].notification.classList.remove(SN.nodeClasses.anim.hide);\r\n            }\r\n\r\n            if (this.onlyOne.set) {\r\n                this.onlyOne.states.isVisible = false;\r\n            }\r\n\r\n            this._destroyNotification(nId);\r\n        }, animTimeout);\r\n    }\r\n\r\n    _destroyNotification(nId) {\r\n        console.log(`SN: Running ._destroyNotification() on nId ${nId}...`);\r\n\r\n        const nodesArrayKeys = Object.keys(this.nodes[nId]);\r\n        const nodesArrayValues = Object.values(this.nodes[nId]);\r\n\r\n        new Promise((resolve) => {\r\n            let nodeKey = 0;\r\n\r\n            nodesArrayValues.forEach((node) => {\r\n                node.remove();\r\n\r\n                nodeKey++;\r\n\r\n                if (nodeKey === nodesArrayKeys.length) {\r\n                    resolve(\"All nodes have been removed succesfully.\");\r\n                }\r\n            });\r\n        })\r\n            .then(() => {\r\n                this.animatedRun = null;\r\n\r\n                delete this.nodes[nId];\r\n                delete this.msgData[nId];\r\n                delete this.timeoutIds[nId];\r\n\r\n                this.nodes.wrapper.dispatchEvent(this.events[nId].destroyed);\r\n\r\n                delete this.events[nId];\r\n\r\n                console.log(`SN: Notification ${nId} has succesfully been destroyed.`);\r\n\r\n                if (Object.keys(this.msgData).length === 0) {\r\n                    this.nodes.wrapper.dispatchEvent(this.events.allDestroyed);\r\n                }\r\n\r\n                if (this.onlyOne.set && this.onlyOne.states.inReshow) {\r\n                    this.onlyOne.states.inReshow = false;\r\n\r\n                    this.show();\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                throw new Error(error);\r\n            });\r\n    }\r\n}\r\n\r\nexport default SN;\r\n"]}