{"version":3,"sources":["../../src/js/index.js"],"names":["mergeOptions","require","getPropValue","motionAllowed","timeToMs","createEl","getRandomIntUnder","defaultOptions","autoHide","onlyOneNotification","parentEl","document","body","position","animations","SN","constructor","userOptions","arguments","length","undefined","this","mergedOptions","motionPref","instanceId","nId","nodes","msgData","timeoutIds","events","onlyOne","set","states","nextMsgData","animatedRun","animated","hideCallTimeout","init","Error","concat","wrapper","nodeSkeletons","tagName","attrs","dataset","parentElFChild","firstElementChild","wrapperSibling","classList","contains","nextElementSibling","insertBefore","screenPosArray","split","add","nodeClasses","allDestroyed","CustomEvent","detail","destroy","runningDestroy","addEventListener","e","hide","show","text","type","inReshow","isVisible","_reshowNotification","_initNotification","_getMsgData","_showNewNotification","role","values","Object","entries","notification","append","notificationId","shown","destroyed","once","defaultMsgData","notext","notype","message","textContent","anim","base","animTimeout","showAnim","setTimeout","remove","dispatchEvent","hideCall","clearTimeout","inHide","nIdsArray","keys","forEach","nTimeoutIds","timeoutId","i","id","_hideNotification","hideAnim","className","replace","typeRegex","_destroyNotification","nodesArrayKeys","nodesArrayValues","Promise","resolve","nodeKey","node","then","catch","error","class"],"mappings":"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","sourcesContent":["const mergeOptions = require(\"merge-options\");\nimport { getPropValue, motionAllowed, timeToMs } from \"@codebundlesbyvik/css-operations\";\nimport createEl from \"@codebundlesbyvik/element-operations\";\nimport getRandomIntUnder from \"@codebundlesbyvik/number-operations\";\n\nconst defaultOptions = {\n    autoHide: true,            // Number / Boolean\n    onlyOneNotification: true, // Boolean\n    parentEl: document.body,   // Element\n    position: \"top center\",    // String\n    animations: \"auto\"         // String / Boolean\n};\n\nclass SN {\n    constructor(userOptions = {}) {\n        this.mergedOptions = mergeOptions(defaultOptions, userOptions);\n\n        this.autoHide = this.mergedOptions.autoHide;\n        this.parentEl = this.mergedOptions.parentEl;\n        this.position = this.mergedOptions.position;\n        this.motionPref = this.mergedOptions.animations;\n\n        this.instanceId = null;\n\n        this.nId = 1;\n        this.nodes = {};\n        this.msgData = {};\n\n        this.timeoutIds = {};\n        this.events = {};\n        this.onlyOne = {\n            set: this.mergedOptions.onlyOneNotification,\n            states: {},\n            nextMsgData: {}\n        };\n\n        this.animatedRun = null;\n    }\n\n    static nodeClasses = {\n        wrapper: \"simple-notifier\",\n        notification: \"simple-notification\",\n        typeRegex: /simple-notification--[A-Za-z]+/g,\n        shown: \"is-shown\",\n        anim: {\n            base: \"animated\",\n            show: \"fadeIn\",\n            hide: \"fadeOut\"\n        }\n    }\n\n    static nodeSkeletons = {\n        wrapper: {\n            tagName: \"div\",\n            attrs: {\n                class: SN.nodeClasses.wrapper\n            }\n        },\n        notification: {\n            tagName: \"div\",\n            attrs: {\n                class: SN.nodeClasses.notification,\n                role: \"alert\"\n            }\n        },\n        message: {\n            tagName: \"p\",\n            attrs: {\n                class: `${SN.nodeClasses.notification}__message`\n            }\n        }\n    };\n\n    static defaultMsgData = {\n        notext: {\n            text: \"This is some dummy text for you, because none was passed in.\",\n            type: \"debug\"\n        },\n        notype: {\n            type: \"default\"\n        }\n    };\n\n    get animated() {\n        switch(this.motionPref) {\n            case \"undefined\":\n            case \"auto\":\n                return motionAllowed();\n            default:\n                return this.motionPref;\n        }\n    }\n\n    get hideCallTimeout() {\n        switch(this.autoHide) {\n            case true:\n                return 3500;\n            case false:\n                return 0;\n            default:\n                return this.autoHide;\n        }\n    }\n\n    init() {\n        console.log(\"SN: Running .init()...\");\n\n        if (this.instanceId) {\n            throw new Error(`SN: .init() has already been called on this instance (${this.instanceId}).`);\n        }\n\n        this.instanceId = getRandomIntUnder(100000);\n\n        this.nodes.wrapper = createEl(\n            SN.nodeSkeletons.wrapper.tagName,\n            SN.nodeSkeletons.wrapper.attrs\n        );\n\n        this.nodes.wrapper.dataset.instanceId = this.instanceId;\n\n        const parentElFChild = this.parentEl.firstElementChild;\n\n        // Insert the instance in the DOM after any earlier initialized instances sharing the same parentEl.\n        const wrapperSibling = parentElFChild.classList.contains(\"simple-notifier\")\n            ? parentElFChild.nextElementSibling\n            : parentElFChild;\n\n        this.parentEl.insertBefore(this.nodes.wrapper, wrapperSibling);\n\n        const screenPosArray = this.position.split(\" \");\n\n        // If only a y-position is set by the user, add an x-position.\n        if (screenPosArray.length === 1) {\n            screenPosArray[1] = \"center\";\n        }\n\n        this.nodes.wrapper.classList.add(\n            `${SN.nodeClasses.wrapper}--pos-y-${screenPosArray[0]}`,\n            `${SN.nodeClasses.wrapper}--pos-x-${screenPosArray[1]}`\n        );\n\n        this.events.allDestroyed = new CustomEvent(\"allNotificationsDestroyed\", { detail: {\n            instanceId: this.instanceId\n        }});\n\n        console.log(`SN: Instance ${this.instanceId} has been initialized.`);\n    }\n\n    destroy() {\n        console.log(\"SN: Running .destroy()...\");\n\n        if (!this.instanceId) {\n            throw new Error(\"SN: Instance isn't initialized!\");\n        }\n\n        if (this.runningDestroy) {\n            console.log(\"SN: .destroy was called whilst already running. Returning.\");\n\n            return;\n        }\n\n        this.runningDestroy = true;\n\n        this.nodes.wrapper.addEventListener(\"allNotificationsDestroyed\", (e) => {\n            console.log(\"SN: All notifications have been destroyed.\");\n\n            if (this.onlyOne) {\n                this.onlyOne.states = {};\n                this.onlyOne.nextMsgData = {};\n            }\n\n            this.events = {};\n\n            this.nId = 1;\n\n            this.instanceId = null;\n\n            delete this.runningDestroy;\n\n            console.log(`SN: Instance ${e.detail.instanceId} has been destroyed.`);\n        });\n\n        this.hide();\n    }\n\n    show(text, type) {\n        console.log(\"SN: Running .show()...\");\n\n        if (!this.instanceId) {\n            throw new Error(\"SN: Instance isn't initialized!\");\n        }\n\n        if (this.onlyOne.set) {\n            if (this.onlyOne.states.inReshow) {\n                console.log(\"SN: onlyOneNotification === true and .show() was called during execution ._reshowNotification(). Returning.\");\n\n                return;\n            }\n\n            if (this.onlyOne.states.isVisible) {\n                console.log(\"SN: onlyOneNotification === true and notification is currently visible. Calling ._reshowNotification()...\");\n\n                this._reshowNotification(text, type);\n\n                return;\n            }\n        }\n\n        let nId = this.nId;\n\n        if (!this.onlyOne.set) {\n            this.nId++;\n        }\n\n        this._initNotification(nId);\n\n        this._getMsgData(nId, text, type);\n\n        this._showNewNotification(nId);\n    }\n\n    _initNotification(nId) {\n        console.log(`SN: Running ._initNotification() on nId ${nId}...`);\n\n        this.nodes[nId] = {};\n\n        for (const [role, values] of Object.entries(SN.nodeSkeletons)) {\n            if (role === \"wrapper\")\n                continue;\n\n            this.nodes[nId][role] = createEl(values.tagName, values.attrs);\n\n            if (role === \"notification\") {\n                this.nodes.wrapper.insertBefore(\n                    this.nodes[nId][role],\n                    this.nodes.wrapper.firstElementChild\n                );\n            } else {\n                this.nodes[nId].notification.append(this.nodes[nId][role]);\n            }\n        }\n\n        this.nodes[nId].notification.dataset.notificationId = nId;\n\n        this.timeoutIds[nId] = {};\n\n        this.events[nId] = {};\n\n        this.events[nId].shown = new CustomEvent(\"notificationShown\", { detail: {\n            instanceId: this.instanceId,\n            notificationId: nId\n        }});\n        this.events[nId].destroyed = new CustomEvent(\"notificationDestroyed\", { detail: {\n            instanceId: this.instanceId,\n            notificationId: nId\n        }});\n\n        this.nodes.wrapper.addEventListener(\n            \"notificationShown\",\n            this.events[nId].shown,\n            { once: true }\n        );\n        this.nodes.wrapper.addEventListener(\n            \"notificationDestroyed\",\n            this.events[nId].destroyed,\n            { once: true }\n        );\n    }\n\n    _getMsgData(nId, text, type) {\n        console.log(`SN: Running ._getMsgData on nId ${nId}...`);\n\n        if (!text) {\n            if (this.onlyOne.nextMsgData) {\n                text = this.onlyOne.nextMsgData.text;\n                type = this.onlyOne.nextMsgData.type;\n\n                this.onlyOne.nextMsgData = {};\n            } else {\n                text = SN.defaultMsgData.notext.text;\n                type = SN.defaultMsgData.notext.type;\n            }\n        }\n\n        if (!type) {\n            type = SN.defaultMsgData.notype.type;\n        }\n\n        this.msgData[nId] = {};\n\n        this.msgData[nId].text = text;\n        this.msgData[nId].type = type;\n    }\n\n    _showNewNotification(nId) {\n        console.log(`SN: Running ._showNewNotification() on nId ${nId}...`);\n\n        this.animatedRun = this.animated;\n\n        this.nodes[nId].message.textContent = this.msgData[nId].text;\n\n        this.nodes[nId].notification.classList.add(\n            `${SN.nodeClasses.notification}--${this.msgData[nId].type}`,\n               SN.nodeClasses.shown\n        );\n\n        if (this.animatedRun) {\n            this.nodes[nId].notification.classList.add(\n                SN.nodeClasses.anim.base,\n                SN.nodeClasses.anim.show\n            );\n\n            const animTimeout = timeToMs(getPropValue(\n                this.nodes[nId].notification,\n                \"animation-duration\"\n            ));\n\n            this.timeoutIds[nId].showAnim = setTimeout(() => {\n                this.nodes[nId].notification.classList.remove(SN.nodeClasses.anim.show);\n            }, animTimeout);\n        }\n\n        if (this.onlyOne.set) {\n            this.onlyOne.states.isVisible = true;\n        }\n\n        this.nodes.wrapper.dispatchEvent(this.events[nId].shown);\n\n        if (this.hideCallTimeout > 0) {\n            this.timeoutIds[nId].hideCall = setTimeout(() => {\n                this.hide(nId);\n            }, this.hideCallTimeout);\n        } else {\n            this.animatedRun = null;\n        }\n    }\n\n    _reshowNotification(text, type) {\n        console.log(\"SN: Running ._reshowNotification()...\");\n\n        this.onlyOne.states.inReshow = true;\n\n        this.onlyOne.nextMsgData.text = text;\n        this.onlyOne.nextMsgData.type = type;\n\n        clearTimeout(this.timeoutIds[1].hideCall);\n\n        this.hide(1);\n    }\n\n    hide(nId) {\n        console.log(\"SN: Running .hide()...\");\n\n        if (!this.instanceId) {\n            throw new Error(\"SN: Instance isn't initialized!\");\n        }\n\n        if (this.onlyOne.set) {\n            if (this.onlyOne.states.inHide) {\n                console.log(\"SN: onlyOneNotification === true and .hide() was called whilst already running. Returning.\");\n\n                return;\n            }\n\n            this.onlyOne.states.inHide = true;\n        }\n\n        let nIdsArray;\n\n        if (typeof nId === \"number\") {\n            if (this.msgData[nId] === \"undefined\") {\n                console.warn(`SN: .hide() was called on a non-existant notification. Returning!`);\n\n                return;\n            }\n\n            nIdsArray = [nId];\n        }\n\n        if (typeof nId === \"undefined\") {\n            nIdsArray = Object.keys(this.msgData);\n\n            if (nIdsArray.length > 0) {\n                console.log(this.timeoutIds);\n\n                Object.values(this.timeoutIds).forEach((nTimeoutIds) => {\n                    Object.values(nTimeoutIds).forEach((timeoutId) => {\n                        clearTimeout(timeoutId);\n                    });\n                });\n            } else if (this.runningDestroy) {\n                this.nodes.wrapper.dispatchEvent(this.events.allDestroyed);\n            } else {\n                console.warn(\"SN: .hide() was called, but no notification is currently shown. Returning!\");\n\n                return;\n            }\n        }\n\n        let i = 1;\n\n        nIdsArray.forEach((id) => {\n            this._hideNotification(id);\n\n            i++;\n\n            if (this.onlyOne.set && i > nIdsArray.length) {\n                this.onlyOne.states.inHide = false;\n            }\n        });\n    }\n\n    _hideNotification(nId) {\n        console.log(`SN: Running ._hideNotification() on nId ${nId}...`);\n\n        if (this.animatedRun === null) {\n            this.animatedRun = this.animated;\n        }\n\n        let animTimeout = 0;\n\n        if (this.animatedRun) {\n            this.nodes[nId].notification.classList.add(SN.nodeClasses.anim.hide);\n\n            animTimeout = timeToMs(getPropValue(\n                this.nodes[nId].notification,\n                \"animation-duration\"\n            ));\n        }\n\n        this.timeoutIds[nId].hideAnim = setTimeout(() => {\n            this.nodes[nId].notification.classList.remove(SN.nodeClasses.shown);\n            this.nodes[nId].notification.className =\n                this.nodes[nId].notification.className.replace(SN.nodeClasses.typeRegex, \"\");\n\n            if (this.animatedRun) {\n                this.nodes[nId].notification.classList.remove(SN.nodeClasses.anim.hide);\n            }\n\n            if (this.onlyOne.set) {\n                this.onlyOne.states.isVisible = false;\n            }\n\n            this._destroyNotification(nId);\n        }, animTimeout);\n    }\n\n    _destroyNotification(nId) {\n        console.log(`SN: Running ._destroyNotification() on nId ${nId}...`);\n\n        const nodesArrayKeys = Object.keys(this.nodes[nId]);\n        const nodesArrayValues = Object.values(this.nodes[nId]);\n\n        new Promise((resolve) => {\n            let nodeKey = 0;\n\n            nodesArrayValues.forEach((node) => {\n                node.remove();\n\n                nodeKey++;\n\n                if (nodeKey === nodesArrayKeys.length) {\n                    resolve(\"All nodes have been removed succesfully.\");\n                }\n            });\n        })\n            .then(() => {\n                this.animatedRun = null;\n\n                delete this.nodes[nId];\n                delete this.msgData[nId];\n                delete this.timeoutIds[nId];\n\n                this.nodes.wrapper.dispatchEvent(this.events[nId].destroyed);\n\n                delete this.events[nId];\n\n                console.log(`SN: Notification ${nId} has succesfully been destroyed.`);\n\n                if (Object.keys(this.msgData).length === 0) {\n                    this.nodes.wrapper.dispatchEvent(this.events.allDestroyed);\n                }\n\n                if (this.onlyOne.set && this.onlyOne.states.inReshow) {\n                    this.onlyOne.states.inReshow = false;\n\n                    this.show();\n                }\n            })\n            .catch((error) => {\n                throw new Error(error);\n            });\n    }\n}\n\nexport default SN;\n"]}